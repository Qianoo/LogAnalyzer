import { viteSingleFile } from 'vite-plugin-singlefile';
import path from 'path';
import fs from 'fs';
import zlib from 'zlib';

const MAX_BUNDLE_SIZE = 1.5 * 1024 * 1024;

const GUIDE_FOR_FRONTEND = `
<!--
  This is a single file build of the frontend.
  It is automatically generated by the build process.
  Do not edit this file directly.
  To make changes, refer to the "Web UI" section in the README.
-->
`.trim();

// 创建单文件构建插件的工厂函数
function createSingleFilePlugin(filename) {
  let config;  // 在闭包中存储配置
  return {
    name: `llamacpp:${filename}`,
    apply: 'build',
    configResolved(resolvedConfig) {
      config = resolvedConfig;  // 使用闭包变量而不是 this
    },
    writeBundle(options, bundle) {
      const outputFile = path.join(config.build.outDir, filename);
      if (!fs.existsSync(outputFile)) return;

      const content = GUIDE_FOR_FRONTEND + '\n' + fs.readFileSync(outputFile, 'utf-8');
      const compressed = zlib.gzipSync(Buffer.from(content, 'utf-8'), { level: 9 });
      
      // 清理 gzip 头部
      const buffer = Buffer.from(compressed);
      buffer[0x4] = 0; buffer[0x5] = 0; buffer[0x6] = 0; buffer[0x7] = 0; // timestamp
      buffer[0x9] = 0; // OS

      // 检查大小
      if (buffer.byteLength > MAX_BUNDLE_SIZE) {
        throw new Error(
          `${filename} bundle size is too large (${Math.ceil(buffer.byteLength / 1024)} KB).\n` +
          `Please reduce the size of the frontend or increase MAX_BUNDLE_SIZE in vite.config.js.\n`
        );
      }

      // 写入文件
      const publicDir = path.join(config.build.outDir, '../../public');
      fs.writeFileSync(path.join(publicDir, `${filename}.gz`), buffer);
    }
  };
}

// 根据命令行参数选择要构建的文件
const buildTarget = process.env.BUILD_TARGET || 'index';
const buildConfig = {
  index: {
    input: 'index.html',
    plugins: [viteSingleFile(), createSingleFilePlugin('index.html')]
  },
  logViewer: {
    input: 'logViewer.html',
    plugins: [viteSingleFile(), createSingleFilePlugin('logViewer.html')]
  }
}[buildTarget];

export default {
  build: {
    rollupOptions: {
      input: buildConfig.input
    }
  },
  plugins: process.env.ANALYZE ? [] : buildConfig.plugins
};
